# in this file we will go through the FireDrake tutorial for solving DG advection equation with upwinding
# the equation is q_t + (u dot grad)q = 0
# please see the tutorial for details


# import needed tools


from firedrake import *
import math
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation


# set the unit square mesh

mesh = UnitSquareMesh(40, 40, quadrilateral = True)





# Set up the function space of discontinuous bilinear elements for q
# and a vector values continuous function space for our veloity field

V = FunctionSpace(mesh, "DQ", 1)
W = VectorFunctionSpace(mesh, "CG", 1)




# set up the intial velocity field using a simple analytic expression

x, y = SpatialCoordinate(mesh)

velocity = as_vector((0.5 - y, x - 0.5))

u = Function(W).interpolate(velocity)


# Now we set the cosine-bell-cone-slotted-cylinder initial condition.
# The first four lines declare various parameters relating to the positions of these objects
# the analytic expressions appear in the last three lines


bell_r0 = 0.15 ; bell_x0 = 0.25 ; bell_y0 = 0.5
cone_r0 = 0.15 ; cone_x0 = 0.5 ; cone_y0 = 0.25
cyl_r0 = 0.15 ; cyl_x0 = 0.5 ; cyl_y0 = 0.75
slot_left = 0.475 ; slot_right = 0.525 ; slot_top = 0.85


bell = 0.25 * ( 1 + cos(math.pi * min_value(sqrt(pow(x-bell_x0, 2) + pow(y-bell_y0, 2))/bell_r0, 1.0)))

cone = 1.0 - min_value(sqrt(pow(x-cone_x0, 2) + pow(y-cone_y0, 2) + pow(y-cone_y0, 2))/cyl_r0, 1.0)

slot_cyl = conditional(sqrt(pow(x-cyl_x0, 2) + pow(y-cyl_y0, 2)) < cyl_r0, conditional(And(And(x > slot_left, x < slot_right), y < slot_top), 0.0, 1.0), 0.0)

# we declare the initial condition of q to be the sum of these fields. We add 1 to this so that the initial field lies betwen 1 and 2 rather than 0 or 1
# This ensures that we cant get away with neglecting the inflow boundary condition.
# We also save the initial state so that we can check the L^2 - norm error at the end


q = Function(V).interpolate(1.0 + bell + cone + slot_cyl)
q_init = Function(V).assign(q)


# create a list to store the function values at every timestep so that we can make a movie of them later


qs = []


# We will run for time 2*pi
# We take 600 steps
# We declare an extra variable for technical reasons
# Finally we define the inflow boundary condtion q_in. In general, this would be a Function but here we just use a Constant value

T = 2 * math.pi
dt = T / 600.0
dtc = Constant(dt)
q_in = Constant(1.0)


# Declare our variational forms, solving for delta q at each stage

dq_trial = TrialFunction(V)

phi = TestFunction(V)

a = phi*dq_trial * dx


# The RHS
# We define n to be the built-in FacetNormal object ; a unit normal vector that can be used in integrals over exterior and interior facets
# We define un to be an object which is equal to u dot n. If this is positive, and zero if this is negative

n = FacetNormal(mesh)
un = 0.5 * (dot(u,n) + abs(dot(u, n)))

# Define the RHS form :1 as delta t times the sum of four integrals


L1 = dtc * ( q * div(phi*u)*dx - conditional(dot(u, n) < 0, phi * dot(u,n) * q_in, 0.0)*ds - conditional(dot(u,n) > 0, phi*dot(u,n)*q, 0.0)*ds - (phi('+') - phi('-'))*(un('+')*q('+') - un('-')*q('-'))*ds)


q1 = Function(V); q2 = Function(V)
L2 = replace(L1, {q: q1}); L3 = replace(L1, {q : q2})


dq = Function(V)



# Set the mass matrix so we dont have to recreate it


params = {'ksp_type': 'preonly', 'pc_type': 'bjacobi', 'sub_pc_type': 'ilu'}
prob1 = LinearVariationalProblem(a, L1, dq)
solv1 = LinearVariationalSolver(prob1, solver_parameters=params)
prob2 = LinearVariationalProblem(a, L2, dq)
solv2 = LinearVariationalSolver(prob2, solver_parameters=params)
prob3 = LinearVariationalProblem(a, L3, dq)
solv3 = LinearVariationalSolver(prob3, solver_parameters=params)


# Run the time loop - 3 RK steps. Every 20 steps we write the solution to the file and the current time to the terminal


t = 0.0
step = 0
output_freq = 20

while t < T - 0.5*dt:

    solv1.solve()

    q1.assign(q + dq)


    solv2.solve()
    q2.assign(0.75 * q + 0.25 * ( q1 + dq ))

    solv3.solve()
    q.assign((1.0/3.0)*q + (2.0/3.0)*(q2 + dq))


    step += 1
    t += dt

    if step % output_freq == 0:

        qs.append(q.copy(deepcopy=True))

        print('t =' , t)



# To check our solution we display L^2 error by comparing to the initial condition

L2_err = sqrt(assemble((q - q_init)*(q - q_init)*dx))
L2_init = sqrt(assemble(q_init*q_init*dx))
print(L2_err/L2_init)
print()


# animate the solution

nsp = 16

fn_plotter = FunctionPlotter(mesh, num_sample_points=nsp)


# set figure and axes


def animate(q):
    colors.set_array(fn_plotter(q))


# make and save the animation

interval = 1e3 * output_freq * dt
animation = FuncAnimation(fig, animate, frames=qs, interval = interval)


try:
    animation.save("DG_advection.mp4", writer = "ffmpeg")
except:
    print("Failed to write movie! Try installinng 'ffmpeg'")



